@model Ecommerce_Application.Models.ProductDetailsModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Details</title>
    <link rel="stylesheet" href="~/Content/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.1/css/all.min.css" integrity="sha512-2SwdPD6INVrV/lHTZbO2nodKhrnDdJK9/kg2XD1r9uGqPo1cUbujc+IYdlYdEErWNu69gVcYgdxlmVmzTWnetw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body {
            background-color: #FFF7DD;
        }
    </style>
</head>
<body>
    <header>
        <div id="dynamicHeaderContent">
        </div>
    </header>
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="p-4 border bg-white shadow-sm d-flex rounded-3" style="width: 90%">
            <img src="@Model.Product.imgUrl" class="img-fluid" style="max-height: 500px" />
            <div class="d-flex justify-content-center align-items-center flex-grow-1">
                <table>
                    <tr>
                        <td>
                            <h1>@Model.Product.ProductName</h1>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <h3 id="productPrice">₹ @Model.Product.price</h3>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div class="d-flex justify-content-evenly" style="width: 150px;height: 50px; color: white; font-size: 20px; font-weight: 600">
                                <div id="reduceBtn" class="d-flex justify-content-center align-items-center" style="width: 40px; font-size: 23px; height: 50px; background-color: #80A1BA; cursor: pointer">
                                    <i class="fa-solid fa-minus"></i>
                                </div>
                                <div id="productQuantity" class="d-flex justify-content-center align-items-center" style="width: 40px; height: 50px; background-color: #80A1BA">
                                    1
                                </div>
                                <div id="increaseBtn" class="d-flex justify-content-center align-items-center" style="width: 40px; height: 50px; background-color: #80A1BA; cursor: pointer ">
                                    <i class="fa-solid fa-plus"></i>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button id="addToCartBtn" class="btn mt-3" type="button" style="background-color: #FFF7DD; color: black !important; font-weight: 600; font-size: 19px ">Add to Cart</button>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="toastMsg" class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toastElement" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong id="toastHead" class="me-auto"></strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div id="toastBody" class="toast-body">

            </div>
        </div>
    </div>

    <script src="~/Scripts/bootstrap.bundle.min.js"></script>
    <script src="~/Scripts/jquery-3.7.0.min.js"></script>
    <script>
        $(document).ready(function () {

            const toastElement = $('#toastElement');
            const toast = new bootstrap.Toast(toastElement, {
                autohide: true,
                delay: 5000
            });

            let isProductPresent = @Html.Raw(Json.Encode(Model.IsProductPresent));
            let productQuantity = isProductPresent ? @Html.Raw(Json.Encode(Model.CartProduct != null ? Model.CartProduct.Quantity : 1)) : 1;
            let cartItemId = isProductPresent ? @Html.Raw(Json.Encode(Model.CartProduct != null ? Model.CartProduct.CartItemId : 0)) : 0;
            let maxQuantity = @Model.Product.quantity;
            let productPrice = '@Model.Product.price';

            let currentValue = parseInt(productQuantity);
            productPrice = parseInt(productPrice);
            productQuantity = parseInt(productQuantity);


            if (isProductPresent) {
                $('#productQuantity').text(productQuantity);
                $('#productPrice').text(`₹ ${productPrice * currentValue}`);
                disableBtn();
            }

            $("#reduceBtn").click(() => {

                if (currentValue > 1) {
                    currentValue--;
                } else if (currentValue == 1) {
                    return;
                }

                updateCartItem("decrease", function (success) {
                    if (success) {
                        $('#productQuantity').text(currentValue);
                        $('#productPrice').text(`₹ ${productPrice * currentValue}`);
                    }
                });
            })

            $("#increaseBtn").click(() => {
                if (currentValue < maxQuantity) {
                    currentValue++;
                } else {
                    showToast("Max Stock", "Max Stock Reached", "bg-danger");
                    return;
                }

                updateCartItem("increase", function (success) {
                    if (success) {
                        $('#productQuantity').text(currentValue);
                        $('#productPrice').text(`₹ ${productPrice * currentValue}`);
                    }
                });
            })

            $('#addToCartBtn').click(() => {

                const btn = $('#addToCartBtn');
                const cart = {
                    ProductID: @Model.Product.ProductId,
                    Quantity: currentValue,
                    Price: @Model.Product.price
                };

                btn.prop('disabled', true);
                btn.text('Adding...');

                $.ajax({
                    url: '/Cart/AddToCart',
                    type: 'POST',
                    data: JSON.stringify(cart),
                    contentType: 'application/json',
                    success: function (response) {
                        if (response.newCartItem != 0) {
                            $('#cartItemCount').text(response.cartItemCount)
                            var testval = $('#cartItemCount').val();
                            console.log(testval);

                            isProductPresent = true;
                            cartItemId = response.newCartItem;
                            disableBtn();
                        } else {
                            btn.prop('disabled', false);;
                            btn.text('Add to Cart');
                        }
                    },
                    error: function () {
                        btn.prop('disabled', false);
                        btn.text('Add to Cart');
                    }
                });
            })

            function updateCartItem(updateType, callback) {
                if (isProductPresent) {
                    let quantity = currentValue;

                    if (updateType !== 'decrease' || quantity >= 1) {
                        $.post('/Cart/UpdateItem', { cartId: cartItemId, type: updateType }, function (html) {
                            if (html) {
                                showToast("Updated", "Cart Updated", "bg-success");
                                callback(true);
                            } else {
                                showToast("Error", "Cart Update Error", "bg-danger");
                                callback(false);
                            }
                        }).fail(function () {
                            showToast("Error", "Server Error", "bg-danger");
                            callback(false);
                        });
                    } else {
                        callback(false);
                    }
                } else {
                    callback(true);
                }
            }

              $.get('@Url.Action("LoadHeader", "Home")', { isCart: false}, function (data) {
                    $('#dynamicHeaderContent').html(data);
                });

            function disableBtn() {
                const btn = $('#addToCartBtn');

                btn.prop('disabled', true);
                btn.text('Item in Cart');
                btn.addClass('btn-secondary');
            }

            function showToast(title, message, bgClass) {
                $('#toastElement').removeClass('bg-success bg-danger bg-warning').addClass(bgClass);
                $('#toastHead').text(title);
                $('#toastBody').text(message);

                toast.show();
            }
    });
    </script>
</body>
</html>
